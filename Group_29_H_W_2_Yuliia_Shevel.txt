 Сервер 162.55.220.72:5005 Endpoint /first

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Проверить, что в body приходит правильный string.
pm.test("String in body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});

Сервер 162.55.220.72:5005 Endpoint /user_info_3

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let jsonData = pm.response.json();

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("check_name", function () {
    pm.expect(name).to.eql("Polya");
});

// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("check_age", function () {
    pm.expect(age).to.eql("18");
});

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("check_salary", function () {
    pm.expect(salary).to.eql(1000);
});

// 7. Спарсить request.
let req = pm.request;
// или
jsonReqeust = request.data

// 8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("check_req_name", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
let request_age = req.body.formdata.get("age")
pm.test("check_req_age", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
let request_salary = req.body.formdata.get("salary")
pm.test("check_req_salary", function () {
    pm.expect(+jsonData.salary).to.eql(+req.salary);
});

// 11. Вывести в консоль параметр family из response.
console.log(jsonData.salary)

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("salary_check", function () {
    pm.expect(+jsonData.family.u_salary_1_5_year).to.eql(req.salary * 4);
});


Сервер 162.55.220.72:5005 Endpoint /object_info_3

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let jsonData = pm.response.json();

// // 4. Спарсить request.
let req = pm.request

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name_check", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("age_check", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("salary_check", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});

// 8. Вывести в консоль параметр family из response.
console.log(jsonData.family)

// 9. Проверить, что у параметра dog есть параметры name.
pm.test("dog_has_property_name", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("name");
});
//или
pm.test("dog have name", function () {
     if(!!jsonData.family.pets?.dog?.name) {
         return true;
         throw Error ()
};

// 10. Проверить, что у параметра dog есть параметры age.
pm.test("dog_has_property_age", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("age");
});
// 11. Проверить, что параметр name имеет значение Luky.
pm.test("param name equal Luky", function () {
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4.
pm.test("param age equal 4", function () {
    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
});


Сервер 162.55.220.72:5005 Endpoint /object_info_4

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let jsonData = pm.response.json();

// 4. Спарсить request.
let req_2 = pm.request;

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check name", function () {
    pm.expect(jsonData.name).to.eql(req_2.name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Check age", function () {
    pm.expect(jsonData.age).to.eql(+req_2.age);
});

// 7. Вывести в консоль параметр salary из request.
console.log(req_2.salary)

// 8. Вывести в консоль параметр salary из response.
console.log(jsonData.salary)

// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(jsonData.salary[0])

// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[1])

// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[2])

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Check 0-params", function () {
    pm.expect(jsonData.salary[0]).to.eql(+req_2.salary);
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check 1-params *2", function () {
    pm.expect(+jsonData.salary[1]).to.eql(req_2.salary * 2);
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check 1-params *3", function () {
    pm.expect(+jsonData.salary[2]).to.eql(req_2.salary * 3);
});

// 15. Создать в окружении переменную name
let user_name = jsonData.name

// 16. Создать в окружении переменную age
let user_age = jsonData.age

// 17. Создать в окружении переменную salary
let user_salary = jsonData.salary

// 18. Передать в окружение переменную name
pm.environment.set("name", user_name);

// 19. Передать в окружение переменную age
pm.environment.set("age", user_age);

// 20. Передать в окружение переменную salary
pm.environment.set("salary", user_salary);

// // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (let i = 0; i<jsonData.salary.length; i++) {
    console.log(jsonData.salary[i] + " test");
};
//или
for (let i in jsonData.salary){
    console.log(i, jsonData.salary[i])
};


Сервер 162.55.220.72:5005 Endpoint /user_info_2


//Вставить параметр salary из окружения в request {{salaryRespEnv}}
//Вставить параметр age из окружения в age {{ageRespEnv}}
//Вставить параметр name из окружения в name {{nameRespEnv}}
// 4. Отправить запрос.
// 5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 6. Спарсить response body в json.
let jsonData = pm.response.json()

// 7. Спарсить request.
let request_2 = pm.request

// 8. Проверить, что json response имеет параметр start_qa_salary
pm.test("have_prop_start_qa_salary", function () {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});

// 9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("have_prop_qa_salary_after_6_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("have_prop_qa_salary_after_12_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});

// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("have_prop_qa_salary_after_1.5year", function () {
   pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});

// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("have_prop_qa_salary_after_3.5year", function () {
   pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});

// 13. Проверить, что json response имеет параметр person
pm.test("have_prop_person", function () {
   pm.expect(jsonData).to.have.property("person");
});

// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("check start_qa_salary", function () {
    pm.expect(+jsonData.start_qa_salary).to.eql(+request_2.salary)
});

// 15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Check qa_salary_after_6_months", function () {
    pm.expect(+jsonData.qa_salary_after_6_months).to.eql(+request_2.salary * 2)
});

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Check qa_salary_after_12_months", function () {
    pm.expect(+jsonData.qa_salary_after_12_months).to.eql(+request_2.salary * 2.7)
});

// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Check qa_salary_after_1.5_year", function () {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(+request_2.salary * 3.3)
});

// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Check qa_salary_after_3.5_years", function () {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(+request_2.salary * 3.8)
});

// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Check person u_name", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql(+request_2.salary)
});

// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Check person u_age", function () {
    pm.expect(jsonData.person.u_age).to.eql(+request_2.age)
});

// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Check u_salary_5_years", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(+request_2.salary * 4.2)
});

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for(let m in resp.person) {
    if(typeof(resp.person[m]) == 'object') {
        console.log(m + ':')
        for(let i = 0; i<Object.keys(resp.person[m]).length;i++) {
            console.log(resp.person[m][i])
      }
    }
    else { console.log(m + ':'+ resp.person[m])
        }
};
